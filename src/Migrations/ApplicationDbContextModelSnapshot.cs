// <auto-generated />
using System;
using LaFlorida.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LaFlorida.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LaFlorida.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1030b74b-96fd-46e0-959c-4d71f99b74c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d019e076-083c-4483-89d3-b9405e625f47",
                            Email = "m.canizares@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Miguel",
                            LastName = "Canizares",
                            LockoutEnabled = false,
                            NormalizedEmail = "M.CANIZARES@OUTLOOK.COM",
                            NormalizedUserName = "M.CANIZARES@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcbeMwG8bsOZOyaxR4nV4z6Eu+VVWuLPPZMJkowGv90YJjYv/4WxCV8KzoCKwWDpA==",
                            PhoneNumber = "0400157444",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c26b1c00-dcd8-4295-9b98-a8be698b08c7",
                            TwoFactorEnabled = false,
                            UserName = "m.canizares@outlook.com"
                        },
                        new
                        {
                            Id = "0e548f75-adda-4431-9462-f113ab1adc37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4e2009b-05f2-4ba5-b380-5f5dfb6758e2",
                            Email = "jorlcm@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jorge",
                            LastName = "Canizares",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORLCM@HOTMAIL.COM",
                            NormalizedUserName = "JORLCM@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFgrlvFSTFVkAf1WmDLIT7yWQubRnUrnfYdCAf0RpomCkxw8CYq2mcKjR2swoWKVmA==",
                            PhoneNumber = "0998229186",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7cc4260f-0a02-4a70-bf80-4d67f4245791",
                            TwoFactorEnabled = false,
                            UserName = "jorlcm@hotmail.com"
                        });
                });

            modelBuilder.Entity("LaFlorida.Models.Cost", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(85)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("CostId")
                        .HasName("PK_Cost");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CycleId");

                    b.HasIndex("JobId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("LaFlorida.Models.Crop", b =>
                {
                    b.Property<int>("CropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Lenght")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CropId")
                        .HasName("PF_Crop");

                    b.ToTable("Crops");
                });

            modelBuilder.Entity("LaFlorida.Models.Cycle", b =>
                {
                    b.Property<int>("CycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CropId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HarvestDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsRent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CycleId")
                        .HasName("PK_Cycle");

                    b.HasIndex("CropId");

                    b.HasIndex("LotId");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("LaFlorida.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("JobId")
                        .HasName("PK_Job");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            Name = "Maquinaria"
                        },
                        new
                        {
                            JobId = 2,
                            Name = "Arriendo"
                        },
                        new
                        {
                            JobId = 3,
                            Name = "Semilla"
                        },
                        new
                        {
                            JobId = 4,
                            Name = "Fertilizante"
                        },
                        new
                        {
                            JobId = 5,
                            Name = "Mano de Obra"
                        },
                        new
                        {
                            JobId = 6,
                            Name = "Quimicos"
                        });
                });

            modelBuilder.Entity("LaFlorida.Models.Lot", b =>
                {
                    b.Property<int>("LotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("LotId")
                        .HasName("PK_Lot");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("LaFlorida.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Buyer")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("SaleId")
                        .HasName("PK_Sale");

                    b.HasIndex("CycleId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("LaFlorida.Models.Withdraw", b =>
                {
                    b.Property<int>("WithdrawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("varchar(85)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("WithdrawId")
                        .HasName("PK_Withdraw");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CycleId");

                    b.ToTable("Withdraws");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0b75fd57-659d-4ec5-9864-3be915e49a5c",
                            ConcurrencyStamp = "4802a8e2-27c8-47c8-8191-95c4d6cc2af2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cd074895-bf44-40d6-b511-61848932ad64",
                            ConcurrencyStamp = "986ea838-1075-42df-810b-ebc718dc5d76",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "e0219917-9bb9-4433-8f1b-123246352e99",
                            ConcurrencyStamp = "bbfe7e82-fb9e-4373-bed8-3479590445e1",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "f23e58df-3f4a-49c6-9b28-a9043cfe0557",
                            ConcurrencyStamp = "16cbc98b-21e1-4916-a9ae-046170094786",
                            Name = "Machinist",
                            NormalizedName = "MACHINIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(85);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(85);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(85)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1030b74b-96fd-46e0-959c-4d71f99b74c7",
                            RoleId = "0b75fd57-659d-4ec5-9864-3be915e49a5c"
                        },
                        new
                        {
                            UserId = "0e548f75-adda-4431-9462-f113ab1adc37",
                            RoleId = "0b75fd57-659d-4ec5-9864-3be915e49a5c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(85)")
                        .HasMaxLength(85);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LaFlorida.Models.Cost", b =>
                {
                    b.HasOne("LaFlorida.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Costs")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_Cost_ApplicationUser");

                    b.HasOne("LaFlorida.Models.Cycle", "Cycle")
                        .WithMany("Costs")
                        .HasForeignKey("CycleId")
                        .HasConstraintName("FK_Cost_Cycle")
                        .IsRequired();

                    b.HasOne("LaFlorida.Models.Job", "Job")
                        .WithMany("Costs")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_Cost_Job")
                        .IsRequired();
                });

            modelBuilder.Entity("LaFlorida.Models.Cycle", b =>
                {
                    b.HasOne("LaFlorida.Models.Crop", "Crop")
                        .WithMany("Cycles")
                        .HasForeignKey("CropId")
                        .HasConstraintName("FK_Cycle_Crop")
                        .IsRequired();

                    b.HasOne("LaFlorida.Models.Lot", "Lot")
                        .WithMany("Cycles")
                        .HasForeignKey("LotId")
                        .HasConstraintName("FK_Cycle_Lot")
                        .IsRequired();
                });

            modelBuilder.Entity("LaFlorida.Models.Sale", b =>
                {
                    b.HasOne("LaFlorida.Models.Cycle", "Cycle")
                        .WithMany("Sales")
                        .HasForeignKey("CycleId")
                        .HasConstraintName("FK_Sale_Cycle")
                        .IsRequired();
                });

            modelBuilder.Entity("LaFlorida.Models.Withdraw", b =>
                {
                    b.HasOne("LaFlorida.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Withdraws")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_Withdraw_ApplicationUser");

                    b.HasOne("LaFlorida.Models.Cycle", "Cycle")
                        .WithMany("Withdraws")
                        .HasForeignKey("CycleId")
                        .HasConstraintName("FK_Withdraw_Cycle")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LaFlorida.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LaFlorida.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaFlorida.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LaFlorida.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
